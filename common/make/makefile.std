MODULE_DIR := .

include $(MODULE_DIR)/makefile_includes.make

MODULE_INC := $(MODULE_DIR)/inc
MODULE_SRC := $(MODULE_DIR)/src
MODULE_OBJ := $(MODULE_DIR)/obj

obj_dir := obj

DEP_INCLUDES := $(foreach depModule, $(DEP_INC), $(addprefix -I, $(sort $(dir $(wildcard $(PLATFORM_ROOT)/$(depModule)/inc/*.h)))))

SYS_INCLUDES := -I $(SDKSTAGE)/opt/vc/include \
		-I $(SDKSTAGE)/opt/vc/include/interface/vcos/pthreads \
		-I $(SDKSTAGE)/opt/vc/include/interface/vmcs_host/linux \
		-I $(PLATFORM_ROOT)/libs/ilclient \
		-I $(PLATFORM_ROOT)/libs/vgfont

MODULE_INCLUDES := -I $(MODULE_INC)
		
INCLUDES := $(MODULE_INCLUDES) \
	    $(DEP_INCLUDES) \
	    $(SYS_INCLUDES)

temp_depend_objs := $(addprefix $(PLATFORM_ROOT)/, $(DEP_OBJ))

depend_objs := $(foreach depModule, $(temp_depend_objs), $(strip $(wildcard $(depModule))))

depend_objects := $(foreach depModule, $(depend_objs), $(depModule)/$(obj_dir)/module_$(notdir $(depModule)).o)

# define modules sources (%.c)
module_sources := $(notdir $(wildcard $(MODULE_SRC)/*.c))

# define modules objects (%.o)
module_objects := $(addprefix $(MODULE_OBJ)/, $(module_sources:.c=.o))

# define module object (module_%.o)
module_object := $(MODULE_OBJ)/module_$(notdir $(CURDIR)).o

ifeq ($(strip $(wildcard $(MODULE_OBJ))),)
    module_mkdirs := mkdir_obj
endif

# Dependent object target
.PHONY : $(depend_objects)
$(depend_objects) :
	make -C $(subst /$(obj_dir),,$(dir $@)) all

LIBDIR := -L $(PLATFORM_ROOT)/libs/ilclient \
	  -L $(PLATFORM_ROOT)/libs/vgfont \
	  -L /opt/vc/lib/

# Linker options
LDFLAGS := -l ilclient -l pthread -l rt -l bcm_host -l vcos -l openmaxil
LDFLAGS += -pg

# Compile options
CFLAGS := -pg -g

# Default build target. This is the recursive build target. The make script
# enters every directory and issues "make" , which defaults to "make all".
all : $(module_mkdirs) \
      $(module_object)


core : $(depend_objects)
	$(CC) $^ $(LIBDIR) $(LDFLAGS) -o $@
	cp $@ ../scripts

# Create ouput directory
mkdir_obj :
	mkdir $(MODULE_OBJ)

# Link all compiled .o files into a single module .o file
$(module_object) : $(module_objects)
	$(LD) -r $^ -o $@

# Compile all source .c files to .o files
$(MODULE_OBJS)/%.o : %.c
	$(CC) -c $(CFLAGS) $(INCLUDES) $< -o $@

# Remove all object files
clobber_mod_files := $(module_object) \
		     $(module_objects)

clean:
	rm -rf $(obj_dir)

clobber : clobber_dependents
	rm -f $(clobber_mod_files)





